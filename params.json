{"name":"TinyReflectiveToolkit","tagline":"A small library containing utilities related to reflection under the CLR.","body":"# What's this? #\r\nIt's a small library that offers some cool reflection-related facilities.\r\n\r\n## AssemblyLoader ##\r\nBy default, your runtime may be loading your application's dependencies lazily - that is, just before the first time you attempt to use them. This is good for applications that value short startup time and can handle small, distributed performance hits along the way.\r\n\r\nBut there are scenarios in which eager loading and thus a longer startup time is preferred over incremental but possibly unpredictable lazy loading of dependencies. (A game is an example of an application that might fall into this category.)\r\n\r\nThe `AssemblyLoader` class gives you the opportunity to **load pending dependencies** (and their dependencies, in turn) **at any specified point.**\r\n* It works **without requiring any configuration** from you. \r\n* It **offers events** to which you can subscribe and be alerted between loading dependencies - allowing you to easily create informative splash screens for your GUI, for example.\r\n\r\n## Runtime Contracts ##\r\nWhen working with C# (or any other language with static and nominal typing), you may occasionally end up in a situation where you have two or more types that both expose one or more compatible methods:\r\n\r\n    public class UnrelatedType1 {\r\n        public int GetValue() { return 1; }\r\n    }\r\n\r\n    public class UnrelatedType2 {\r\n        public int GetValue() { return 2; }\r\n    }\r\n\r\nYou want to put instances of these types in a common variable or collection and call `GetValue()` on them, but you can't because they don't have a declared useful relationship that would allow substitution. So, you write an interface that you know they both implement:\r\n\r\n    public interface IValue {\r\n        int GetValue();\r\n    }\r\n\r\nAnd you attempt to declare that they implement this interface, only to find out that you can't - because at least one of these types comes from a 3rd party library/framework/component and you don't have access to its code (at least, not directly). You end up in the frustrating situation of having to use reflection or employ dynamic typing.\r\n\r\nReflection has disadvantages:\r\n\r\n1. You have to cast the instances to a common supertype (like `object`) that's not useful for you and in the process **you lose compile-time type safety**.\r\n2. **The call spots are ugly**, in the sense that they are littered with `typeof` and `Invoke` and even more casting and boxing.\r\n3. **Member access using reflection is often slower** than access through a statically typed expression (even if that call is a virtual call through an interface).\r\n\r\nDynamic typing has disadvantages:\r\n\r\n1. You have to use a dynamic variable and **lose compile-time type safety**.\r\n2. When you're using a dynamic expression, [**you lose IntelliSense!**](https://www.youtube.com/watch?v=WWaLxFIVX1s)\r\n3. **Member access using dynamic expressions is often slower** than access through a statically typed expression (as above).\r\n\r\nUsing this very library, you have a third way to solve this problem - so don't throw away that type-safe interface you declared earlier! Just find an object whose runtime type satisfies your interface, call `.ToContract<T>()` where `T` is your interface and you're done!\r\n\r\n    var values = new IValue[] {\r\n       new UnrelatedType1().ToContract<IValue>(),\r\n       new UnrelatedType2().ToContract<IValue>() \r\n    };\r\n    var sum = values.Sum(x => x.GetValue());\r\n\r\nThis works and it has some important advantages:\r\n\r\n1. **The syntax is clean** and natural C#.\r\n2. **IntelliSense doesn't go away at all** and neither does type safety at the call spots.\r\n3. When calling through the interface, **the actual methods are stubs implemented using IL** - not using reflection and lookups.\r\n\r\nIt also has disadvantages and limitations:\r\n\r\n1. The `ToContract<T>()` call can be expensive, because it uses reflection (to verify compatibility for each type/interface combination) and it emits IL dynamically to generate proxy types. However, this is largely mitigated by the fact that **each type/interface combination is cached and existing proxies are reused** if they are applicable.\r\n2. The `ToContract<T>()` call can only verify compatibility at runtime, not compile time.\r\n3. The runtime type of the passed object must be declared public.\r\n4. The interface `T` must also be public.\r\n5. Generic methods are not supported yet.\r\n\r\n## Extension methods for reflection types and collections ##\r\nSome built-in reflection-related methods aren't as easy to use as they could be. Some slightly more humane extension methods are offered, to make life a little bit easier:\r\n\r\nFind all things with a specified attribute: \r\n\r\n    var tests = allTypes.WithAttribute<TestFixtureAttribute>();\r\n\r\nEffortlessly apply a filter _to that attribute_, while still returning the members you want: \r\n\r\n    var thoseTests = allTypes\r\n        .WithAttribute<TestFixtureAttribute>(x => x.Description == \"That test\");\r\n\r\n...and more stuff will be added.","google":"","note":"Don't delete this file! It's used internally to help with page regeneration."}