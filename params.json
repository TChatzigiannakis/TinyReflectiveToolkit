{"name":"TinyReflectiveToolkit","tagline":"A small library containing utilities related to reflection under the CLR.","body":"**TinyReflectiveToolkit** is a small C# library that offers some cool reflection-related facilities. It's still a very early version and a stable API is far, far away.\r\n\r\nIt is written and maintained by [**Theodoros Chatzigiannakis**](https://github.com/TChatzigiannakis). It is distributed as free software, covered by the [**Mozilla Public License v2.0**](https://github.com/TChatzigiannakis/TinyReflectiveToolkit/blob/master/LICENSE).\r\n\r\n## Runtime Contracts, Part 1: Implementing .NET interfaces at runtime\r\nWhen working with C# (or any other language with static and nominal typing), you may occasionally end up in a situation where **you have two or more types that both expose one or more compatible methods:**\r\n\r\n    public class UnrelatedType1 \r\n    {\r\n        public int GetValue() { return 1; }\r\n    }\r\n\r\n    public class UnrelatedType2\r\n    {\r\n        public int GetValue() { return 2; }\r\n    }\r\n\r\nFor some reason, **you may want to put instances of these types in a common variable or collection** and call `GetValue()` on them, **but you can't**, because they don't have a declared relationship that would allow the substitution you want:\r\n\r\n    var values = new object[] \r\n    {\r\n       new UnrelatedType1(),\r\n       new UnrelatedType2()\r\n    };\r\n    var sum = values.Sum(x => x.GetValue());      // no GetValue() member\r\n\r\nUsually, the solution is to **define an interface that you know they already implement in practice:**\r\n\r\n    public interface IValue \r\n    {\r\n        int GetValue();\r\n    }\r\n\r\nAnd then go ahead and add that interface to the list of interfaces these types implement. **But often you can't do that because at least one of these types comes from a 3rd party library/framework** and you don't have access to its code (or it may be impractical to change it and rebuild).\r\n\r\nMost likely, you end up in the frustrating situation of having to use reflection or employ dynamic typing.\r\n\r\n**Reflection** has disadvantages:\r\n\r\n1. You have to cast the instances to a common supertype (like `object`) that's not useful for you and in the process **you lose compile-time type safety**.\r\n2. **The call spots are ugly**, in the sense that they are littered with `typeof`, `GetType()` and `Invoke` and possibly more casting and boxing.\r\n3. **Member access using reflection is often slower** than access through a statically typed expression (even if that call is a virtual call through an interface).\r\n\r\n**Dynamic typing** has disadvantages:\r\n\r\n1. You have to use a dynamic variable and **lose compile-time type safety**.\r\n2. When you're using a dynamic expression, [**you lose IntelliSense!**](https://www.youtube.com/watch?v=WWaLxFIVX1s)\r\n3. **Member access using dynamic expressions is often slower** than access through a statically typed expression (as above).\r\n\r\nUsing this very library, you have a third way to solve this problem - so **don't throw away that type-safe interface** you declared earlier! Find an object whose runtime type satisfies your interface, **simply call `.ToContract<T>()`** where `T` is your interface and you're done!\r\n\r\nWith the example types declared above, this becomes:\r\n\r\n    var values = new IValue[]\r\n    {\r\n       new UnrelatedType1().ToContract<IValue>(),\r\n       new UnrelatedType2().ToContract<IValue>() \r\n    };\r\n    var sum = values.Sum(x => x.GetValue());\r\n\r\n**And it works!** \r\n\r\nThis techinque has some important advantages:\r\n\r\n1. **The syntax is clean** and natural C#.\r\n2. **IntelliSense doesn't go away at all** and neither does type safety at the interface call spots.\r\n3. When calling through the interface, **the actual methods are stubs implemented using IL** - the interface doesn't use reflection and lookups.\r\n4. **It's extremely easy to use:** just define your interface, call an extension method on those objects and let things take care of themselves automatically!\r\n\r\nOf course, it also has some disadvantages and limitations:\r\n\r\n1. The `ToContract<T>()` call can be expensive, because it uses reflection (to verify compatibility for each type/interface combination) and it emits IL dynamically to generate proxy types. However, this is largely mitigated by the fact that **each type/interface combination is cached and existing proxy types are reused** if they are applicable.\r\n2. The `ToContract<T>()` call can only verify compatibility at runtime, not compile time.\r\n3. The runtime type of the passed object must be declared public.\r\n4. The interface `T` must also be public.\r\n\r\n## Runtime Contracts, Part 2: Covariance and Contravariance in Return Types and Parameter Types\r\n\r\nConsider the following class:\r\n\r\n    public class MyClass\r\n    {\r\n        public string Method(object arg)\r\n        {\r\n            return arg.ToString();\r\n        }\r\n    }\r\n\r\nAnd consider the following interface:\r\n\r\n    public interface IObjectToString\r\n    {\r\n        string Method(object arg);\r\n    }\r\n\r\nIt's easy to see why `MyClass` matches the constraints set by the `IObjectToString` interface. So you can legally declare `MyClass : IObjectToString`.\r\n\r\nThere are, however, other variations of this interface that the class doesn't seem to match:\r\n\r\n    public interface IObjectToObject\r\n    {\r\n        object Method(object arg);\r\n    }\r\n    public interface IStringToString\r\n    {\r\n        string Method(string arg);\r\n    }\r\n    public interface IStringToObject\r\n    {\r\n        object Method(string arg);\r\n    }\r\n\r\nIndeed, any attempt to declare `MyClass : IObjectToObject` or `MyClass : IStringToString` or `MyClass : IStringToObject` is a compile-time error. This is how the C# language is. \r\n\r\nBut this is just a design decision or a limitation. It doesn't *have* to be like this. \r\n\r\nIf the interface requires that the method returns any kind of `object`, then a method that returns a `string` (which *is* a kind of `object`) actually satisfies the contract. In other words, **return types could be covariant** in inheritance scenarios.\r\n\r\nSimilarly, if an interface requires that a method takes a `string`, then a method that can take any `object` (including a `string`) actually satisfies the contract as well. In other words, **parameter types could be contravariant** in inheritance scenarios.\r\n\r\nIf you can see why this is so, then you'll be happy to know that **this library supports covariance and contravariance** (for method return types and parameter types respectively). In other words, the class shown above actually satisfies all four interfaces/contracts that were presented, using the `.Satisfies()` and `.ToContract()` extension methods.\r\n\r\nThe careful reader will notice that even where C# does support covariance and contravariance, it's applicable only for reference types. Or, with an example: an `IEnumerable<string>` is an `IEnumerable<object>` but an `IEnumerable<int>` isn't an `IEnumerable<object>`. This is because unboxed value types aren't proper [Liskov subtypes](http://en.wikipedia.org/wiki/Liskov_substitution_principle) of `object`.\r\n\r\nThis same careful reader will be happy to know that this library supports all the above _even for value types_. In other words, what we described above between `string` and `object` works the same between `int` and `object` as well.\r\n\r\n## Runtime Contracts, Part 3: Binding to Operators\r\n**Normal .NET interfaces are designed to only declare instanced public properties and methods.** This means that an interface can't describe the existence of static methods, operators, conversions, etc. This usually makes sense from a design viewpoint, but there are times when it limits the expressiveness of the constraints.\r\n\r\n**The runtime contracts offered in this library** are described as .NET interfaces, but they **can bind to things like operators,** using some attributes. For example, consider the following contract:\r\n\r\n    public interface ICastableTo<T>\r\n    {\r\n        [Cast]\r\n        T PerformCast();\r\n    }\r\n\r\nThe `[Cast]` attribute means that the candidate types are not required to implement a `PerformCast()` method. Instead, **they are required to contain an explicit conversion operator** to `T`. If they do, then they satisfy this contract. (The name of the method is irrelevant.)\r\n\r\nFor example, the built-in types `int`, `float`, `double`, `decimal` satisfy the `ICastableTo<int>` contract.\r\n\r\nWith that out of the way, whenever instances of these types are accessed through this contract, a `PerformCast()` method will be available and it will polymorphically invoke the correct cast operator for that particular runtime type.\r\n\r\nFor binary operators, you can pick which side you want your current object, like this:\r\n\r\n    public interface ISubtractable\r\n    {\r\n        [Subtraction(OpSide.ThisLeft)]\r\n        int Subtract(int p);\r\n\r\n        [Subtraction(OpSide.ThisRight)]\r\n        int SubtractFrom(int p);\r\n    }\r\n\r\nIn this case, for a type `T`, `Subtract` binds to `operator- (T, int)` (`this` goes left) while `SubtractFrom` binds to `operator- (int, T)` (`this` goes right).\r\n\r\nThere is currently no support for binary operators of the form `operator- (T, T)`.\r\n\r\n## AssemblyLoader: Loading dependencies eagerly\r\n\r\nBy default, your runtime may be loading your application's dependencies lazily - that is, just before the first time you attempt to use them. This is good for applications that value short startup time and can handle small, distributed performance hits along the way.\r\n\r\nBut there are scenarios in which eager loading (even with a longer startup time) is _preferred_ over incremental but possibly unpredictable lazy loading of dependencies. (A game is an example of an application that might fall into this category.)\r\n\r\n**The `AssemblyLoader` class gives you the opportunity to eagerly load pending dependencies** (and their dependencies, in turn) at any specified point. It's easy to use:\r\n\r\n    new AssemblyLoader().LoadAllDependencies();\r\n\r\n**It exposes events** to which you can subscribe and be alerted between loading dependencies - it's great for (say) creating _informative_ splash screens for your application!\r\n\r\n    var loader = new AssemblyLoader();\r\n    loader.AssemblyLoading += (assembly) =>\r\n    {\r\n        Application.Invoke((a, b) => splash.LoadingText = assembly.Name);\r\n        Task.Delay(1).Wait();\r\n    };\r\n    loader.LoadAllDependencies();\r\n\r\n## Extension methods for reflection types and collections\r\nSome built-in reflection-related methods aren't as easy to use as they could be. Some slightly more humane extension methods are offered, to make life a little bit easier:\r\n\r\nFind all things with a specified attribute: \r\n\r\n    var tests = allTypes.WithAttribute<TestFixtureAttribute>();\r\n\r\nEffortlessly apply a filter _to that attribute_, while still returning the members you want: \r\n\r\n    var thoseTests = allMethods\r\n        .WithAttribute<TestAttribute>(x => x.Description == \"That test\");\r\n\r\n...and more stuff will be added.","google":"","note":"Don't delete this file! It's used internally to help with page regeneration."}